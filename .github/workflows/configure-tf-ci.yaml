name: Terraform GitOps Workflow
run-name: TerraformCD

on:
  push:
    paths:
      - 'infrastructure-tf/**' # Trigger only when changes occur in this folder
  workflow_dispatch: # Allow manual trigger
    inputs:
      approval_comment:
        description: "Manually triggering the job"
        required: false

env:
  TF_VERSION: "1.5.7"
  AWS_REGION: "us-east-1"

jobs:
  terraform-plan:
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Terraform Cache
        id: cache-terraform
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/terraform
          key: terraform-${{ env.TF_VERSION }}
          restore-keys: terraform-

      - name: Install Terraform (if not cached)
        if: steps.cache-terraform.outputs.cache-hit != 'true'
        run: |
          wget https://releases.hashicorp.com/terraform/${{ env.TF_VERSION }}/terraform_${{ env.TF_VERSION }}_linux_amd64.zip
          unzip terraform_${{ env.TF_VERSION }}_linux_amd64.zip -d /usr/local/bin/
          rm terraform_${{ env.TF_VERSION }}_linux_amd64.zip

      - name: Verify Terraform Installation
        run: terraform -version

      - name: Terraform Init
        working-directory: infrastructure-tf
        run: terraform init

      - name: Terraform Plan
        working-directory: infrastructure-tf
        run: terraform plan -out=tfplan -input=false
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: infrastructure-tf/tfplan
          retention-days: 7

  manual-approval:
    needs: terraform-plan
    runs-on: self-hosted
    outputs:
      status: ${{ steps.approval.outputs.status }} # Pass step output to job output
    steps:
      - name: Await User Input
        id: approval
        uses: actions/github-script@v6
        with:
          script: |
            const core = require('@actions/core');
            const userInput = prompt("Type 'approved' to continue or anything else to cancel:");
            if (userInput !== 'approved') {
              throw new Error("Approval denied by user.");
            }
            core.setOutput('status', 'approved');

  terraform-apply:
    needs: manual-approval
    if: needs.manual-approval.outputs.status == 'approved'
    runs-on: self-hosted
    steps:
      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan

      - name: Restore Terraform Cache
        id: cache-terraform
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/terraform
          key: terraform-${{ env.TF_VERSION }}
          restore-keys: terraform-

      - name: Install Terraform (if not cached)
        if: steps.cache-terraform.outputs.cache-hit != 'true'
        run: |
          wget https://releases.hashicorp.com/terraform/${{ env.TF_VERSION }}/terraform_${{ env.TF_VERSION }}_linux_amd64.zip
          sudo unzip terraform_${{ env.TF_VERSION }}_linux_amd64.zip -d /usr/local/bin/
          rm terraform_${{ env.TF_VERSION }}_linux_amd64.zip

      - name: Verify Terraform Installation
        run: terraform -version

      - name: Terraform Apply
        working-directory: infrastructure-tf
        run: terraform apply -input=false tfplan
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
